#include "tools.h"
#include <time.h>

int main()
{
	char            dir[MAX_PATH];
	char            file_path[MAX_PATH];
	FILE *          mem_file;
	FILE *          def_file;
	FILE *          hdr_file;
	unsigned long   base_addr;
	time_t          t;
	struct tm *     local_t;

	// TODO: Urediti main funkciju

	if (!GetCurrentDirectory(MAX_PATH, dir)) {
		printf("Cannot get current directory.\n");
		return 1;
	}
	strcpy(dir + strlen(dir), "\\graphicStuff");
	printf("Current directory: %s\n", dir);

	sprintf(file_path, "%s\\mem.txt", dir);

	if (!(mem_file = fopen(file_path, "w"))) {
		printf("Cannot open mem.txt\n");
		return 1;
	}

	sprintf(file_path, "%s\\def.txt", dir);

	if (!(def_file = fopen(file_path, "w"))) {
		printf("Cannot open def.txt\n");
		fclose(mem_file);
		return 1;
	}

	sprintf(file_path, "%s\\map.h", dir);

	if (!(hdr_file = fopen(file_path, "w"))) {
		printf("Cannot open map.h\n");
		fclose(mem_file);
		fclose(def_file);
		return 1;
	}

	time(&t);
	local_t = localtime(&t);

	fprintf(mem_file, "-- GENERATED BY BC_MEM_PACKER\n"
		"-- DATE: %s\n"
		"\tsignal mem : ram_t := (\n", asctime(local_t));

	fprintf(def_file, "/*\n"
		"* GENERATED BY BC_MEM_PACKER\n"
		"* DATE: %s"
		"*/\n", asctime(local_t));

	color_pallete[0].r = 0;
	color_pallete[0].g = 0;
	color_pallete[0].b = 0;

	num_colors = 1;

	base_addr = IMAGE_16x16_BASE_ADDR;
	/*
		fprintf( mem_file, "\n\n--\t\t\t***** 8x8 IMAGES *****\n\n\n" );
		fprintf( def_file, "\n\n// ***** 8x8 IMAGES *****\n\n" );

		process_images( dir, mem_file, def_file, &base_addr, IMG_8x8 );
	*/
	fprintf(mem_file, "\n\n--\t\t\t***** 16x16 IMAGES *****\n\n\n");
	fprintf(def_file, "\n\n// ***** 16x16 IMAGES *****\n\n");

	process_images(dir, mem_file, def_file, &base_addr, IMG_16x16);

	fprintf(mem_file, "\n\n--\t\t\t***** MAP *****\n\n\n");
	fprintf(def_file, "\n\n// ***** MAP *****\n\n");

	/* Create basic map with given size */
	//create_our_map();

	// TODO: Imena fajlova zadavati preko argumenata komande linije

	merge_names_and_ids();

	create_test_map();
	map_to_mem(mem_file, def_file, hdr_file, &base_addr);

	fprintf(hdr_file, "\n#endif // _MAP_H_\n");

	fprintf(mem_file, "\t\tothers => x\"00000000\"\n\t);\n");

	fprintf(mem_file, "\n\n--\t\t\t***** COLOR PALLETE *****\n\n\n");

	colors_to_mem(mem_file, COLOR_PALLETE_BASE_ADDR);

	fclose(mem_file);
	fclose(def_file);
	fclose(hdr_file);

	printf("Memory files generated.\n");

	system("PAUSE");

	return 0;
}